// Software vertex shader generated by Wild Magic.
//
// var float3   kModelPosition       $vin.POSITION
// var float3   kModelNormal         $vin.NORMAL
// var float2   kModelTCoord         $vin.TEXCOORD0
// var float4   kClipPosition        $vout.POSITION
// var float3   kEADColor            $vout.COLOR
// var float2   kTCoord              $vout.TEXCOORD0
// var float3   kSpecularColor       $vout.TEXCOORD1
// var float4x4 WVPMatrix            c[0]
// var float3   CameraModelPosition  c[4]
// var float3   MaterialEmissive     c[5]
// var float3   MaterialAmbient      c[6]
// var float4   MaterialDiffuse      c[7]
// var float4   MaterialSpecular     c[8]
// var float3   Light0ModelDirection c[9]
// var float3   Light0Ambient        c[10]
// var float3   Light0Diffuse        c[11]
// var float3   Light0Specular       c[12]

#include "Wm4SoftRenderer.h"
#include "Wm4Matrix4.h"
#include "Wm4Vector2.h"
#include "Wm4Vector3.h"
#include "Wm4ColorRGB.h"

namespace Wm4
{

void v_GlossMap (const float* afRegister, const float* afInVertex,
    float* afOutVertex)
{
    // Get the register items.
    const Matrix4f& rkWVPMatrix = *(const Matrix4f*)&afRegister[0];
    const Vector3f& rkCameraModelPosition = *(const Vector3f*)&afRegister[16];
    const ColorRGB& rkMatEms = *(const ColorRGB*)&afRegister[20];
    const ColorRGB& rkMatAmb = *(const ColorRGB*)&afRegister[24];
    const ColorRGB& rkMatDif = *(const ColorRGB*)&afRegister[28];
    float fMatAlpha = afRegister[31];
    const ColorRGB& rkMatSpc = *(const ColorRGB*)&afRegister[32];
    float fMatSpecExp = afRegister[35];
    const Vector3f& rkL0ModelDirection = *(const Vector3f*)&afRegister[36];
    const ColorRGB& rkL0Amb = *(const ColorRGB*)&afRegister[40];
    const ColorRGB& rkL0Dif = *(const ColorRGB*)&afRegister[44];
    const ColorRGB& rkL0Spc = *(const ColorRGB*)&afRegister[48];

    // Get the input items.
    Vector4f kModelPosition(afInVertex[0],afInVertex[1],afInVertex[2],1.0f);
    const Vector3f& rkModelNormal = *(const Vector3f*)&afInVertex[3];
    const Vector2f& rkModelTCoord = *(const Vector2f*)&afInVertex[6];

    // Access the output items.
    Vector4f& rkClipPosition = *(Vector4f*)&afOutVertex[0];
    ColorRGB& rkEADColor = *(ColorRGB*)&afOutVertex[4];
    Vector2f& rkTCoord = *(Vector2f*)&afOutVertex[7];
    ColorRGB& rkSpecularColor = *(ColorRGB*)&afOutVertex[9];

    // *** program ***

    // Transform the position from model space to clip space.
    rkClipPosition = kModelPosition*rkWVPMatrix;

    float fDiff, fSpec;
    GetDirectionalLightFactors((Vector3f)kModelPosition,rkModelNormal,
        rkCameraModelPosition,rkL0ModelDirection,fMatSpecExp,fDiff,fSpec);

    rkEADColor = rkMatEms + rkMatAmb*rkL0Amb;
    rkSpecularColor = ColorRGB::BLACK;
    if (fDiff > 0.0f)
    {
        rkEADColor += fDiff*rkMatDif*rkL0Dif;
        if (fSpec > 0.0f)
        {
            rkSpecularColor += fSpec*rkMatSpc*rkL0Spc;
        }
    }

    // Pass through the texture coordinate.
    rkTCoord = rkModelTCoord;
}

WM4_IMPLEMENT_VPROGRAM(GlossMap);
WM4_REGISTER_VPROGRAM(GlossMap);

}
