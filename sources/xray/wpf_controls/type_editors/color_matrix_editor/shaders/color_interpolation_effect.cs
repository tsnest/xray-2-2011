//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.1
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Effects;
using System.Windows.Media.Media3D;

namespace xray.editor.wpf_controls.color_matrix_editor.shaders {
	
	public class color_interpolation_effect : ShaderEffect
	{
		public		color_interpolation_effect	( )		
		{
			PixelShader = m_pixel_shader;

			UpdateShaderValue(m_input_property);
			UpdateShaderValue(m_color1_property);
			UpdateShaderValue(m_color2_property);
			UpdateShaderValue(m_color3_property);
			UpdateShaderValue(m_color4_property);
		}

		private static readonly DependencyProperty	m_input_property		= RegisterPixelShaderSamplerProperty("Input", typeof(color_interpolation_effect), 0);
		private static readonly DependencyProperty	m_color1_property		= DependencyProperty.Register("Color1", typeof(Point4D), typeof(color_interpolation_effect), new UIPropertyMetadata( new Point4D( 1, 1, 0, 0 ), PixelShaderConstantCallback(0)));
		private static readonly DependencyProperty	m_color2_property		= DependencyProperty.Register("Color2", typeof(Point4D), typeof(color_interpolation_effect), new UIPropertyMetadata( new Point4D( 1, 0, 1, 0 ), PixelShaderConstantCallback(1)));
		private static readonly DependencyProperty	m_color3_property		= DependencyProperty.Register("Color3", typeof(Point4D), typeof(color_interpolation_effect), new UIPropertyMetadata( new Point4D( 1, 0, 0, 1 ), PixelShaderConstantCallback(2)));
		private static readonly DependencyProperty	m_color4_property		= DependencyProperty.Register("Color4", typeof(Point4D), typeof(color_interpolation_effect), new UIPropertyMetadata( new Point4D( 1, 0, 1, 1 ), PixelShaderConstantCallback(3)));

		private static readonly PixelShader			m_pixel_shader			= new PixelShader{ UriSource = color_range.shaders.utils.make_pack_uri( "type_editors/color_matrix_editor/shaders/color_interpolation.ps" ) };

		public		Brush		input		{
			get {
				return (Brush)GetValue( m_input_property );
			}
			set {
				SetValue( m_input_property, value );
			}
		}
		public		Point4D		color1		{
			get {
				return (Point4D)GetValue( m_color1_property );
			}
			set {
				SetValue( m_color1_property, value );
			}
		}
		public		Point4D		color2		{
			get {
				return (Point4D)GetValue( m_color2_property );
			}
			set {
				SetValue( m_color2_property, value );
			}
		}
		public		Point4D		color3		{
			get {
				return (Point4D)GetValue(m_color3_property);
			}
			set {
				SetValue( m_color3_property, value );
			}
		}
		public		Point4D		color4		{
			get {
				return (Point4D)GetValue( m_color4_property );
			}
			set {
				SetValue( m_color4_property, value );
			}
		}
	}
}